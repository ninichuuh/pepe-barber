import { motion, useAnimation } from "framer-motion"
import { useState, useEffect } from "react"
const AnimatedSVG = () => {
  const [isHovered, setIsHovered] = useState(false)
  const [skewValues, setSkewValues] = useState({ x: 0, y: 0 })
  const controls = useAnimation()
  useEffect(() => {
    const cycleGradient = async () => {
      while (true) {
        await controls.start({
          offset: [0, 0.25, 0.5, 0.75, 1, 0.75, 0.5, 0.25, 0], // Use cycle directly within the start method
          transition: {
            duration: 3, // Set the duration for each cycle
            ease: "linear", // Use linear easing for smooth transitions
          },
        })
      }
    }

    cycleGradient()

    return () => controls.stop() // Stop animation on component unmount
  }, [controls])
  const handleMouseEnter = () => {
    setIsHovered(true)
  }

  const handleMouseLeave = () => {
    setIsHovered(false)
  }

  const handleMouseMove = (event: any) => {
    // Calculate the skew based on the mouse position
    const skewX = (event.pageX / window.innerWidth - 0.5) * 100
    const skewY = Math.min((event.pageY / window.innerHeight - 0.5) * 100, 2)

    // Update the skew values
    setSkewValues({ x: isHovered ? skewX : 0, y: isHovered ? skewY : 0 })
  }

  return (
    <div className="h-full w-full p-8 lg:p-20">
      <svg
        viewBox="0 0 915 665"
        preserveAspectRatio="xMidYMid meet"
        className="h-full w-full overflow-visible"
        strokeWidth="{10}"
        strokeLinecap="round"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        <defs>
          <linearGradient id="gradient">
            <motion.stop offset={0} stopColor="#e3b505" animate={controls} />
            <motion.stop offset={0.25} stopColor="#fff" animate={controls} />
            <motion.stop offset={0.5} stopColor="#000000" animate={controls} />
            <motion.stop offset={0.75} stopColor="red" animate={controls} />
            <motion.stop offset={1} stopColor="#507255" animate={controls} />
          </linearGradient>
        </defs>
        <g transform="matrix(0.1, 0, 0, -0.1, -342.595673, 925.89563)">
          {/* desna obrva */}
          <motion.path
            animate={{
              pathLength: [0, 1],
              scale: isHovered ? 1.05 : 1,
              rotate: isHovered ? 10 : 0,
            }}
            whileTap={{ scale: 0.5, transition: { delay: 0, duration: 0.5 } }}
            transition={{
              delay: 0.5,
              duration: isHovered ? 0.2 : 2,
              ease: [0.32, 0, 0.74, 1],
            }}
            fill="url(#gradient)"
            stroke="url(#gradient)"
            d="M 9785 9210 C 9649 9203 9496 9176 9417 9145 C 9370 9126 9341 9125 9358 9142 C 9365 9149 9370 9164 9370 9177 C 9370 9196 9365 9200 9341 9200 C 9286 9200 9124 9115 9051 9046 L 9017 9015 L 9025 9045 C 9041 9103 9037 9135 9014 9138 C 8977 9143 8835 8973 8756 8829 C 8682 8694 8654 8570 8665 8421 C 8674 8307 8689 8284 8752 8294 C 8800 8302 8911 8357 8964 8399 C 8985 8416 9014 8430 9027 8430 C 9040 8430 9122 8457 9208 8491 C 9294 8525 9388 8558 9415 8565 C 9443 8572 9557 8603 9670 8634 C 10296 8804 10476 8800 10963 8604 C 11052 8568 11160 8520 11202 8497 C 11245 8475 11283 8460 11287 8464 C 11292 8468 11273 8492 11247 8516 C 11220 8540 11200 8560 11203 8560 C 11205 8560 11227 8553 11251 8544 C 11299 8527 11380 8518 11380 8530 C 11380 8539 11195 8756 11178 8767 C 11170 8771 11100 8844 11021 8928 C 10942 9012 10864 9088 10846 9097 C 10704 9174 10588 9195 10328 9193 C 10165 9191 10131 9194 10126 9206 C 10120 9222 10038 9223 9785 9210 Z M 9980 9155 L 9935 9131 L 10226 9136 C 10414 9139 10540 9137 10586 9130 C 10686 9114 10820 9072 10857 9044 C 10875 9031 10961 8940 11049 8842 C 11137 8745 11234 8643 11266 8616 C 11297 8588 11318 8564 11311 8562 C 11305 8560 11247 8584 11182 8615 C 11118 8647 11049 8679 11030 8687 C 10995 8702 10995 8702 11013 8682 C 11023 8671 11049 8649 11071 8634 C 11152 8578 11109 8582 10968 8645 C 10617 8799 10411 8834 10113 8790 C 9946 8766 9731 8703 9495 8609 C 9431 8583 9427 8583 9454 8603 C 9542 8670 9591 8713 9610 8741 L 9632 8771 L 9579 8737 C 9484 8677 9338 8603 9230 8559 C 9172 8536 9113 8511 9098 8504 C 9082 8496 9070 8492 9070 8495 C 9070 8499 9095 8533 9125 8572 C 9156 8611 9178 8645 9176 8648 C 9173 8650 9129 8614 9078 8566 C 8961 8457 8882 8398 8803 8359 C 8711 8313 8706 8317 8713 8448 C 8723 8631 8784 8779 8929 8973 C 8948 8999 8967 9020 8971 9020 C 8974 9020 8973 9001 8968 8978 C 8963 8954 8956 8917 8953 8895 L 8947 8855 L 9046 8956 C 9113 9025 9166 9069 9210 9093 C 9315 9151 9317 9150 9266 9071 C 9241 9032 9220 8997 9220 8993 C 9220 8989 9235 9000 9253 9017 C 9336 9097 9675 9174 9965 9178 L 10025 9179 L 9980 9155 Z"
          ></motion.path>
          {/* lijeva obrva */}
          <motion.path
            animate={{
              pathLength: [0, 1],
              scale: isHovered ? 1.1 : 1,
              rotate: isHovered ? -10 : 0,
            }}
            initial={{ x: 10, y: 5 }}
            transition={{
              delay: 0.5,
              duration: isHovered ? 0.2 : 2,
              ease: [0.32, 0, 0.74, 1],
            }}
            fill="url(#gradient)"
            stroke="#fff"
            d="M 5890 9201 C 5890 9194 5830 9191 5693 9191 C 5463 9192 5361 9178 5247 9130 C 5160 9094 5121 9064 5036 8970 C 5004 8934 4929 8856 4870 8795 C 4756 8678 4640 8545 4640 8531 C 4640 8520 4735 8535 4790 8554 L 4835 8570 L 4790 8531 C 4765 8509 4742 8491 4738 8490 C 4730 8490 4727 8460 4734 8460 C 4737 8460 4771 8478 4812 8499 C 4905 8550 5209 8671 5325 8705 C 5638 8796 5870 8775 6464 8604 C 6530 8586 6585 8572 6587 8574 C 6601 8587 6142 8743 6012 8769 C 5646 8843 5430 8813 5020 8630 C 4958 8602 4905 8581 4903 8583 C 4894 8593 4914 8618 4956 8648 C 4981 8667 4999 8684 4997 8687 C 4994 8689 4946 8668 4891 8640 C 4835 8612 4766 8580 4737 8569 L 4685 8549 L 4791 8657 C 4849 8716 4952 8827 5020 8903 C 5090 8981 5159 9049 5180 9060 C 5200 9070 5259 9091 5311 9107 L 5405 9135 L 5737 9134 C 5920 9134 6067 9136 6065 9139 C 6062 9141 6043 9152 6022 9162 L 5985 9180 L 6125 9175 C 6202 9171 6297 9165 6335 9159 C 6490 9138 6712 9068 6758 9027 C 6789 8998 6786 9012 6744 9077 C 6725 9107 6711 9134 6714 9137 C 6717 9140 6751 9125 6791 9104 C 6858 9068 6977 8964 7035 8890 C 7053 8867 7055 8867 7058 8884 C 7060 8895 7056 8930 7050 8962 C 7043 8994 7039 9023 7042 9025 C 7052 9035 7172 8861 7214 8775 C 7269 8662 7297 8572 7306 8476 C 7314 8382 7306 8330 7281 8330 C 7227 8330 7087 8426 6921 8577 C 6832 8659 6828 8649 6912 8549 C 6971 8478 6976 8477 6791 8555 C 6655 8611 6521 8679 6443 8731 C 6419 8747 6400 8755 6400 8751 C 6400 8737 6499 8651 6570 8604 C 6639 8558 6952 8430 6995 8430 C 7009 8430 7041 8414 7067 8393 C 7130 8345 7236 8296 7277 8296 C 7339 8296 7345 8313 7345 8478 C 7344 8619 7343 8628 7312 8711 C 7294 8759 7257 8833 7230 8876 C 7179 8959 7063 9104 7029 9128 C 6987 9157 6966 9117 6990 9054 C 6996 9039 6998 9025 6996 9022 C 6993 9020 6967 9039 6938 9064 C 6878 9116 6719 9200 6678 9200 C 6646 9200 6637 9179 6657 9151 C 6678 9120 6670 9117 6619 9135 C 6595 9144 6530 9163 6475 9177 C 6386 9199 6349 9203 6133 9207 C 5959 9211 5890 9209 5890 9201 Z"
          ></motion.path>
          {/* naocale*/}
          <motion.path
            animate={{
              pathLength: [0, 1, 0],
              scale: isHovered ? [1, 0.9, 1] : 1,
              opacity: [1, 0.85, 1],
            }}
            strokeWidth={1}
            transition={{
              duration: 4,
              repeat: Infinity,
              delay: 0,
              ease: [0.32, 0, 0.74, 1],
            }}
            fill="url(#gradient)"
            stroke="#000"
            d="M 5516 8709 C 5235 8670 5018 8590 4799 8444 C 4518 8256 4307 7986 4185 7659 C 4166 7607 4150 7559 4150 7553 C 4150 7544 4129 7540 4078 7540 C 3971 7540 3779 7520 3750 7507 C 3719 7492 3715 7470 3730 7405 C 3741 7359 3740 7352 3720 7317 C 3698 7281 3698 7280 3715 7207 C 3732 7135 3732 7133 3711 7086 C 3686 7029 3685 7009 3705 6970 C 3720 6941 3787 6911 4035 6821 C 4113 6793 4115 6792 4128 6749 C 4219 6442 4299 6282 4460 6085 C 4663 5837 4973 5639 5283 5559 C 6024 5369 6792 5716 7130 6395 C 7231 6599 7284 6791 7297 7010 C 7301 7081 7307 7110 7320 7125 C 7375 7186 7380 7207 7380 7358 C 7380 7487 7378 7502 7360 7520 C 7348 7532 7327 7540 7305 7540 C 7286 7540 7270 7543 7270 7547 C 7270 7567 7335 7649 7358 7659 C 7373 7665 7426 7676 7475 7684 C 7525 7693 7624 7711 7695 7725 C 7894 7765 8057 7768 8240 7736 C 8684 7659 8677 7661 8715 7601 C 8745 7553 8746 7541 8723 7542 C 8683 7545 8649 7529 8639 7503 C 8633 7486 8632 7423 8636 7333 C 8643 7191 8643 7188 8675 7147 C 8705 7107 8708 7096 8723 6953 C 8733 6870 8751 6759 8765 6708 C 8931 6075 9466 5602 10110 5519 C 10913 5415 11660 5914 11876 6699 C 11889 6745 11901 6784 11902 6785 C 11904 6787 11977 6815 12065 6849 C 12291 6936 12305 6943 12320 6981 C 12332 7010 12331 7020 12311 7077 C 12288 7140 12288 7142 12305 7210 C 12322 7279 12322 7280 12299 7316 C 12279 7350 12278 7356 12289 7402 C 12304 7457 12298 7495 12272 7509 C 12249 7521 12057 7540 11955 7540 L 11873 7540 L 11845 7626 C 11806 7745 11714 7928 11638 8035 C 11557 8150 11361 8347 11245 8429 C 11196 8463 11101 8518 11035 8551 C 10409 8857 9677 8738 9190 8251 C 9065 8125 8966 7993 8898 7862 L 8856 7779 L 8835 7842 C 8809 7922 8795 7930 8590 7965 C 8297 8016 8225 8022 7955 8017 C 7726 8012 7688 8009 7503 7977 C 7392 7957 7283 7936 7260 7930 C 7214 7917 7185 7881 7175 7818 C 7171 7797 7165 7780 7161 7780 C 7157 7780 7140 7808 7124 7843 C 7060 7980 6914 8174 6786 8291 C 6627 8437 6392 8575 6191 8640 C 5995 8703 5695 8734 5516 8709 Z M 5995 8582 C 6344 8507 6661 8310 6876 8034 C 7183 7641 7275 7117 7119 6645 C 6925 6058 6393 5651 5769 5614 C 5606 5604 5389 5633 5230 5687 C 5128 5721 4946 5808 4869 5861 C 4526 6091 4289 6451 4218 6850 C 4148 7245 4248 7677 4483 7997 C 4558 8099 4743 8277 4845 8346 C 5044 8481 5267 8567 5500 8600 C 5605 8614 5891 8604 5995 8582 Z M 10495 8600 C 10821 8563 11141 8408 11380 8170 C 11642 7909 11797 7561 11816 7190 C 11855 6449 11348 5797 10614 5644 C 10439 5607 10220 5605 10053 5638 C 9434 5761 8972 6219 8850 6830 C 8817 6991 8817 7227 8849 7388 C 8899 7645 9008 7874 9177 8079 C 9405 8355 9791 8563 10144 8600 C 10251 8611 10394 8611 10495 8600 Z M 8352 7935 C 8514 7912 8700 7881 8735 7870 C 8763 7861 8768 7851 8792 7772 C 8818 7686 8819 7683 8802 7637 C 8784 7586 8775 7579 8765 7610 C 8756 7639 8712 7689 8681 7705 C 8666 7712 8587 7730 8504 7744 C 8068 7818 8003 7823 7800 7790 C 7454 7733 7363 7716 7339 7704 C 7307 7688 7250 7625 7250 7605 C 7250 7570 7230 7585 7215 7631 C 7198 7681 7198 7685 7221 7767 C 7236 7825 7250 7856 7264 7865 C 7282 7877 7469 7910 7675 7939 C 7784 7954 8229 7951 8352 7935 Z M 7335 7494 C 7349 7480 7351 7457 7348 7344 C 7345 7221 7343 7209 7323 7188 L 7300 7166 L 7300 7200 C 7300 7219 7293 7280 7284 7335 C 7254 7530 7253 7510 7288 7510 C 7305 7510 7326 7503 7335 7494 Z M 8755 7482 C 8746 7458 8720 7273 8720 7231 C 8720 7183 8707 7172 8686 7202 C 8673 7220 8670 7253 8670 7358 C 8670 7485 8671 7491 8692 7499 C 8724 7511 8762 7501 8755 7482 Z M 4130 7478 C 4129 7471 4123 7440 4116 7410 L 4104 7355 L 4009 7339 C 3957 7331 3902 7320 3886 7316 C 3830 7302 3881 7290 3988 7291 C 4045 7292 4093 7290 4096 7288 C 4098 7285 4098 7265 4094 7243 L 4088 7203 L 4021 7196 C 3955 7189 3824 7152 3834 7143 C 3836 7140 3895 7138 3964 7139 L 4090 7139 L 4090 7077 L 4090 7015 L 3957 7015 C 3885 7014 3811 7011 3795 7008 C 3745 6997 3736 7010 3759 7061 C 3783 7112 3785 7148 3768 7218 C 3759 7262 3759 7274 3775 7306 C 3790 7338 3791 7352 3783 7395 C 3777 7422 3773 7446 3774 7447 C 3777 7450 4072 7487 4108 7489 C 4120 7489 4130 7484 4130 7478 Z M 12090 7464 C 12170 7456 12236 7447 12238 7445 C 12240 7444 12236 7422 12230 7397 C 12220 7358 12221 7346 12238 7307 C 12257 7264 12257 7258 12243 7201 C 12229 7145 12229 7136 12244 7093 C 12278 6998 12282 7006 12204 7013 C 12166 7017 12089 7020 12033 7020 L 11930 7020 L 11930 7080 L 11930 7140 L 12054 7134 C 12137 7129 12179 7131 12184 7138 C 12193 7153 12078 7189 11998 7197 C 11928 7203 11920 7210 11920 7268 C 11920 7289 11923 7290 12028 7290 C 12133 7290 12185 7301 12144 7314 C 12133 7317 12087 7327 12040 7335 C 11909 7359 11912 7357 11906 7387 C 11885 7494 11885 7493 11916 7486 C 11932 7483 12010 7473 12090 7464 Z M 4104 6894 C 4108 6863 4109 6836 4107 6834 C 4103 6830 3822 6935 3813 6944 C 3810 6947 3872 6950 3952 6950 L 4097 6950 L 4104 6894 Z M 12190 6943 C 12190 6938 12128 6912 12052 6884 C 11901 6828 11903 6828 11915 6906 L 11921 6950 L 12056 6950 C 12130 6950 12190 6947 12190 6943 Z"
          ></motion.path>
          {/*brkovi*/}
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: skewValues.x,
              skewY: skewValues.y,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 7440 3950 L 7415 3943 L 7443 3935 C 7475 3927 7540 3937 7540 3950 C 7540 3962 7477 3962 7440 3950 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.y : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 1000,
              damping: 20,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 3928 4920 C 3772 4893 3654 4788 3551 4583 C 3481 4442 3465 4369 3466 4195 C 3467 4065 3471 4034 3493 3964 C 3535 3827 3594 3727 3749 3522 C 3888 3338 4041 3208 4300 3053 C 4488 2940 4631 2877 4865 2803 C 5164 2709 5337 2677 5660 2659 C 5901 2645 5981 2650 6140 2689 C 6457 2765 6623 2823 6835 2930 C 6985 3005 7054 3053 7198 3179 C 7276 3247 7311 3271 7338 3275 C 7481 3299 7537 3324 7645 3412 C 7688 3448 7691 3449 7665 3421 C 7649 3403 7598 3361 7553 3327 C 7507 3294 7472 3264 7475 3262 C 7484 3253 7647 3303 7700 3331 L 7755 3359 L 7705 3314 L 7655 3268 L 7696 3272 C 7724 3274 7736 3272 7733 3264 C 7726 3246 7844 3267 7913 3296 C 8001 3333 8013 3334 8056 3312 C 8139 3270 8323 3231 8306 3259 C 8301 3266 8310 3270 8332 3270 L 8365 3270 L 8320 3309 L 8275 3349 L 8334 3319 C 8366 3303 8400 3290 8410 3290 C 8419 3290 8447 3283 8473 3274 C 8557 3245 8556 3262 8471 3324 C 8426 3357 8390 3386 8390 3388 C 8390 3391 8400 3385 8413 3376 C 8500 3313 8550 3294 8673 3275 C 8700 3271 8729 3253 8773 3214 C 8894 3108 8989 3034 9069 2986 C 9203 2905 9439 2807 9630 2752 C 9919 2669 10019 2650 10161 2650 C 10407 2650 10735 2685 10914 2731 C 11106 2780 11351 2865 11495 2934 C 11719 3042 11954 3195 12107 3335 C 12185 3406 12341 3607 12426 3747 C 12591 4019 12603 4321 12460 4600 C 12373 4768 12289 4853 12162 4900 C 12043 4945 11886 4933 11768 4871 C 11603 4785 11452 4663 11406 4580 C 11387 4545 11388 4545 11436 4591 C 11497 4649 11589 4711 11666 4747 C 11717 4771 11737 4774 11820 4774 C 12104 4773 12278 4648 12336 4403 C 12358 4309 12350 4132 12320 4035 C 12240 3779 11998 3506 11710 3347 C 11558 3263 11311 3193 11085 3170 C 10886 3149 10669 3179 10474 3253 C 10315 3314 10191 3382 10082 3469 L 10029 3511 L 10102 3559 C 10377 3738 10511 4130 10386 4385 C 10350 4457 10276 4539 10160 4633 C 10048 4724 9852 4826 9725 4858 C 9570 4897 9574 4890 9765 4796 C 9968 4695 10037 4647 10121 4544 C 10211 4436 10240 4343 10221 4226 C 10198 4084 10136 3998 10011 3935 C 9871 3865 9632 3863 9497 3931 C 9404 3978 9212 4122 9005 4301 C 8861 4424 8789 4477 8718 4510 C 8508 4608 8244 4581 8061 4442 L 8007 4401 L 7956 4440 C 7727 4610 7412 4610 7184 4438 C 7152 4415 7060 4339 6980 4272 C 6816 4132 6660 4013 6568 3957 C 6468 3897 6416 3885 6255 3885 C 6127 3886 6110 3888 6051 3912 C 5865 3990 5784 4110 5792 4300 C 5797 4424 5825 4479 5948 4601 C 6044 4695 6049 4699 6230 4788 C 6331 4839 6404 4880 6393 4880 C 6382 4880 6332 4869 6284 4855 C 6124 4809 5960 4717 5810 4591 C 5640 4447 5587 4348 5586 4175 C 5586 4050 5604 3977 5671 3841 C 5714 3754 5736 3723 5804 3655 C 5848 3610 5908 3561 5937 3545 C 5966 3530 5987 3513 5984 3508 C 5969 3484 5815 3379 5732 3337 C 5357 3143 5032 3114 4582 3235 C 4335 3301 4108 3446 3918 3658 C 3753 3842 3680 4002 3664 4219 C 3652 4377 3705 4543 3798 4637 C 3923 4764 4198 4818 4354 4747 C 4418 4718 4517 4652 4573 4601 L 4614 4565 L 4594 4599 C 4549 4678 4341 4833 4211 4886 C 4155 4909 4046 4931 4000 4929 C 3986 4928 3954 4924 3928 4920 Z M 4155 4859 L 4225 4836 L 4150 4828 C 4033 4816 3981 4802 3900 4762 C 3764 4696 3678 4581 3634 4410 C 3610 4315 3619 4144 3655 4030 C 3723 3814 3897 3582 4127 3399 C 4467 3128 5072 3020 5479 3156 C 5581 3190 5738 3267 5830 3328 C 5909 3380 6034 3489 6050 3520 C 6064 3547 6052 3568 6020 3575 C 5981 3584 5883 3649 5838 3696 C 5673 3872 5597 4152 5667 4333 C 5685 4380 5759 4490 5772 4490 C 5776 4490 5769 4469 5757 4443 C 5738 4402 5735 4378 5736 4275 C 5736 4125 5756 4067 5836 3981 C 5940 3869 6077 3816 6265 3817 C 6490 3818 6573 3864 7018 4234 C 7272 4446 7327 4477 7487 4500 C 7644 4523 7842 4467 7955 4368 C 7979 4347 8002 4330 8007 4330 C 8012 4330 8031 4343 8050 4358 C 8108 4406 8162 4436 8240 4466 C 8309 4492 8327 4494 8450 4495 C 8574 4495 8591 4493 8660 4467 C 8741 4437 8836 4371 9000 4230 C 9052 4185 9159 4099 9237 4039 C 9494 3841 9556 3814 9765 3816 C 9880 3817 9903 3821 9970 3845 C 10145 3910 10245 4015 10280 4171 C 10297 4249 10289 4373 10262 4433 C 10251 4459 10245 4480 10251 4480 C 10268 4480 10340 4358 10357 4300 C 10408 4126 10335 3873 10190 3717 C 10124 3647 10013 3570 9978 3570 C 9965 3570 9960 3562 9960 3541 C 9960 3518 9973 3500 10018 3459 C 10237 3258 10511 3132 10800 3099 C 11036 3072 11345 3123 11598 3230 C 11752 3296 11826 3342 11955 3453 C 12167 3636 12321 3861 12375 4066 C 12400 4161 12405 4323 12386 4405 C 12361 4508 12306 4616 12246 4675 C 12158 4762 11989 4829 11856 4830 C 11826 4830 11810 4834 11816 4839 C 11838 4860 11949 4883 12030 4883 C 12122 4884 12177 4866 12245 4814 C 12316 4760 12438 4567 12481 4440 C 12508 4359 12519 4133 12501 4024 C 12476 3877 12393 3729 12218 3520 C 12100 3380 11941 3233 11812 3147 C 11673 3054 11324 2893 11145 2839 C 10777 2730 10561 2697 10205 2696 C 9988 2696 9958 2698 9890 2717 C 9849 2729 9786 2746 9750 2755 C 9651 2780 9400 2875 9262 2941 C 9116 3010 9038 3056 8950 3124 C 8874 3182 8683 3347 8675 3361 C 8664 3377 8648 3371 8655 3353 C 8659 3343 8664 3329 8668 3321 C 8675 3302 8566 3373 8499 3431 C 8424 3497 8408 3495 8455 3426 C 8468 3406 8477 3390 8474 3390 C 8464 3390 8376 3456 8356 3479 C 8333 3504 8320 3506 8320 3483 C 8320 3469 8317 3470 8297 3488 C 8275 3508 8250 3517 8250 3505 C 8250 3492 8285 3432 8313 3396 C 8351 3348 8331 3358 8242 3429 C 8208 3457 8175 3480 8170 3480 C 8165 3480 8149 3503 8135 3530 C 8110 3580 8090 3588 8090 3550 C 8090 3525 8133 3428 8162 3388 C 8186 3354 8176 3357 8118 3402 C 8082 3430 8060 3432 8060 3407 C 8060 3400 8076 3382 8096 3367 C 8146 3326 8131 3322 8064 3359 L 8008 3389 L 7966 3365 C 7944 3352 7912 3336 7895 3331 C 7868 3321 7870 3324 7913 3361 C 7959 3401 7975 3440 7945 3440 C 7937 3440 7930 3436 7930 3431 C 7930 3421 7851 3360 7838 3360 C 7834 3360 7844 3379 7860 3403 C 7887 3444 7930 3540 7930 3560 C 7930 3586 7902 3565 7877 3520 C 7861 3492 7845 3472 7840 3475 C 7835 3478 7828 3476 7825 3470 C 7815 3455 7689 3360 7677 3360 C 7672 3360 7682 3376 7700 3396 C 7736 3438 7767 3497 7757 3507 C 7753 3510 7736 3500 7718 3484 C 7698 3465 7689 3461 7693 3473 C 7702 3496 7678 3495 7656 3471 C 7646 3461 7612 3433 7579 3410 L 7519 3368 L 7551 3413 C 7594 3475 7584 3489 7530 3440 C 7487 3400 7358 3310 7345 3310 C 7342 3310 7344 3319 7350 3329 C 7375 3377 7352 3364 7245 3270 C 7075 3120 6978 3051 6845 2983 C 6657 2888 6432 2797 6285 2758 C 6247 2748 6181 2730 6140 2719 C 6083 2704 6022 2697 5889 2693 C 5434 2679 4998 2766 4565 2957 C 4266 3089 4157 3160 3955 3349 C 3882 3418 3731 3592 3668 3681 C 3604 3770 3545 3897 3519 4000 C 3500 4073 3498 4103 3503 4210 C 3510 4365 3522 4423 3570 4526 C 3640 4677 3746 4811 3829 4854 C 3908 4895 4035 4897 4155 4859 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 8470 3951 C 8470 3937 8498 3930 8556 3930 C 8615 3930 8628 3944 8579 3954 C 8533 3963 8470 3961 8470 3951 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 8074 3888 C 8070 3883 8074 3874 8081 3869 C 8119 3845 8293 3775 8355 3758 C 8431 3738 8739 3715 8752 3728 C 8756 3732 8696 3744 8617 3754 C 8437 3776 8318 3803 8210 3847 C 8163 3866 8115 3886 8103 3890 C 8089 3896 8078 3895 8074 3888 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 7296 3869 C 7232 3851 7054 3763 7063 3754 C 7065 3752 7109 3768 7161 3789 C 7268 3833 7360 3855 7473 3865 C 7515 3869 7550 3876 7550 3881 C 7550 3898 7368 3890 7296 3869 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 7815 3849 C 7700 3802 7599 3778 7404 3751 L 7265 3732 L 7386 3731 C 7513 3730 7627 3746 7722 3779 C 7801 3806 7940 3872 7940 3881 C 7940 3896 7918 3890 7815 3849 Z"
          ></motion.path>

          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 8460 3881 C 8460 3871 8490 3866 8608 3855 C 8683 3848 8770 3822 8900 3769 C 9005 3726 8996 3738 8875 3805 C 8765 3865 8669 3890 8553 3890 C 8502 3890 8460 3886 8460 3881 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 9855 3623 C 9659 3537 9513 3501 9366 3500 C 9293 3500 9321 3480 9406 3471 L 9475 3464 L 9335 3437 C 9258 3422 9166 3407 9130 3404 C 9009 3392 8882 3425 8787 3492 C 8772 3503 8752 3510 8743 3508 C 8718 3503 8767 3450 8827 3418 C 8911 3372 8991 3357 9115 3363 C 9236 3369 9296 3383 9433 3436 C 9484 3455 9567 3482 9618 3495 C 9705 3517 9823 3570 9912 3626 C 9948 3649 9959 3661 9943 3659 C 9938 3658 9899 3642 9855 3623 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 6095 3636 C 6105 3627 6158 3597 6211 3570 C 6334 3507 6473 3472 6589 3475 C 6712 3477 6712 3496 6588 3503 C 6455 3512 6388 3529 6232 3591 C 6075 3654 6070 3656 6095 3636 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 7205 3476 C 7081 3395 6958 3382 6735 3424 C 6524 3464 6527 3464 6575 3441 C 6656 3402 6793 3368 6895 3363 C 7046 3355 7161 3387 7245 3461 C 7309 3518 7284 3527 7205 3476 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 6259 3375 C 5957 3213 5837 3161 5620 3101 C 5462 3058 5461 3048 5616 3080 C 5797 3117 5938 3172 6167 3292 C 6289 3357 6380 3419 6354 3420 C 6348 3420 6306 3400 6259 3375 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 9680 3389 C 9735 3342 10112 3158 10225 3123 C 10280 3106 10368 3085 10420 3075 C 10472 3066 10526 3057 10538 3054 C 10551 3051 10559 3053 10556 3058 C 10553 3064 10533 3071 10513 3075 C 10455 3085 10279 3136 10200 3164 C 10106 3198 9946 3274 9800 3354 C 9670 3426 9621 3440 9680 3389 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 6355 3301 C 6277 3264 6152 3190 6167 3190 C 6185 3190 6335 3255 6385 3284 C 6471 3335 6450 3347 6355 3301 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 9580 3321 C 9580 3301 9854 3170 9867 3184 C 9871 3187 9723 3274 9653 3309 C 9608 3331 9580 3336 9580 3321 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 6641 3234 C 6558 3178 6306 3056 6190 3015 C 6075 2976 5918 2946 5742 2931 C 5679 2926 5625 2918 5622 2915 C 5618 2911 5692 2910 5785 2913 C 6052 2921 6172 2954 6450 3096 C 6612 3179 6710 3241 6710 3260 C 6710 3277 6697 3272 6641 3234 Z"
          ></motion.path>
          <motion.path
            initial={{ opacity: 0, pathLength: 0 }}
            animate={{
              opacity: 1,
              pathLength: [1],

              fill: "url(#gradient)",
              skewX: isHovered ? skewValues.x : 0,
              skewY: isHovered ? skewValues.x : 0,
            }}
            transition={{
              delay: 0,
              type: "spring",
              stiffness: 100,
              damping: 10,
            }}
            stroke="url(#gradient)"
            onMouseMove={handleMouseMove}
            d="M 9300 3261 C 9300 3242 9419 3167 9570 3090 C 9730 3009 9858 2960 9970 2934 C 10048 2916 10393 2904 10430 2918 C 10448 2925 10419 2928 10320 2932 C 10147 2940 9953 2972 9827 3017 C 9719 3054 9485 3168 9385 3231 C 9323 3270 9300 3278 9300 3261 Z"
          ></motion.path>
        </g>
      </svg>
    </div>
  )
}

export default AnimatedSVG
